/**
 * GPII Process Reporter
 *
 * Copyright 2015 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    os = require("os"),
    path = require("path"),
    gpii = fluid.registerNamespace("gpii");

fluid.require("kettle", require);
fluid.require("./ProcessGet.js", require);
fluid.require("./processesBridge.js", require);

fluid.defaults("gpii.processReporter.base", {
    gradeNames: ["kettle.app", "autoInit"],
    handlers: {
        processGet: {
            route: "/processes",
            type: "get"
        }
    },
    components: {
        platformReporter: {
            type: "gpii.platformReporter.native"
        }
    },
    invokers: {
        fireResponse: {
            funcName: "gpii.processReporter.fireResponse",
            args: ["{arguments}.0", "{arguments}.1", "{platformReporter}"]
        }
    }
});

gpii.processReporter.fireResponse = function (requestProxy, installedSolutions, platformReporter) {
    requestProxy.events.onSuccess.fire({
        solutions: installedSolutions,
        OS: platformReporter.reportPlatform()
    });
};

fluid.defaults("gpii.processReporter.static", {
    gradeNames: ["autoInit", "gpii.processReporter.base"],
    runningSolutionsUrl: "",
    root: path.join(__dirname, ".."),
    components: {
        runningSolutionsDataSource: {
            type: "kettle.dataSource.URL",
            options: {
                url: "{gpii.processReporter.static}.options.runningSolutionsUrl"
            }
        }
    },
    invokers: {
        get: {
            funcName: "gpii.processReporter.static.get",
            args: ["{arguments}.0", "{processReporter}"]
        }
    }
});

gpii.processReporter["static"].get = function (requestProxy, processReporter) {
    processReporter.runningSolutionsDataSource.get(null, function onSuccess(solutions) {
        processReporter.fireResponse(requestProxy, solutions);
    });
};

fluid.defaults("gpii.processReporter.live", {
    gradeNames: ["autoInit", "gpii.processReporter.base"],
    invokers: {
        get: {
            funcName: "gpii.processReporter.live.get",
            args: ["{arguments}.0", "{processReporter}", "{flowManager}.solutionsRegistryDataSource"]
        }
    }
});

gpii.processReporter.live.get = function (requestProxy, processReporter, solutionsRegistryDataSource) {
    var runningSolutions = [];
    solutionsRegistryDataSource.get({os: processReporter.platformReporter.reportPlatform().id}, function onSuccess(entries) {
        fluid.each(entries, function (entry, entryId) {
            if (!runningSolutions.some(function (s) { return s.id === entryId; })) {
                var foundEntry = fluid.find(entry.isRunning, function (runningSolutionsReporter) {
                    var procs = fluid.invokeGradedFunction(runningSolutionsReporter.type, runningSolutionsReporter);
                    if (procs !== null) {
                        return { id: entryId, processInfo: procs };
                    }
                }, null);
                if  (foundEntry !== null) {
                    runningSolutions.push(foundEntry);
                }
            }
        });
        processReporter.fireResponse(requestProxy, runningSolutions);
    });
};

fluid.defaults("gpii.platformReporter.native", {
    gradeNames: ["fluid.littleComponent", "autoInit"],
    invokers: {
        reportPlatform: {
            funcName: "gpii.platformReporter.native.reportPlatform"
        }
    }
});

gpii.platformReporter["native"].reportPlatform = function () { // "native" is a reserved word
    return {
        // TODO: need to report more details - windowmanager, etc.
        id: os.platform(),
        // TODO: Need a better strategy - Node semver fails horribly
        // in the face of the benign underscore (eg. x86_64).
        version: os.release().replace("_", "-")
    };
};

fluid.defaults("gpii.processReporter.dev", {
    gradeNames: ["autoInit", "kettle.urlExpander.distributeDevVariables"]
});
