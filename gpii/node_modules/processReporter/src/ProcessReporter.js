/**
 * GPII Process Reporter
 *
 * Copyright 2015 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

fluid.require("kettle", require);
fluid.require("./processesBridge.js", require);

fluid.defaults("gpii.processReporter", {
    gradeNames: "fluid.component"
});

fluid.defaults("gpii.processReporter.base", {
    gradeNames: ["kettle.app", "gpii.processReporter"],
    requestHandlers: {
        processGet: {
            route: "/processes",
            type: "gpii.processReporter.allSolutions.get",
            method: "get"
        },
        processGetSingle: {
            route: "/processes/:solutionID",
            type: "gpii.processReporter.solution.get",
            method: "get"
        }
    },
    components: {
        platformReporter: {
            type: "gpii.platformReporter.native"
        },
        nameResolver: {
            type: "gpii.processReporter.nameResolver"
        }
    },
    invokers: {
        fireResponse: {
            funcName: "gpii.processReporter.fireResponse",
            args: ["{arguments}.0", "{arguments}.1", "{platformReporter}"]
                  // request, runningSolutions
        }
    }
});

fluid.defaults("gpii.processReporter.allSolutions.get", {
    gradeNames: ["kettle.request.http"],
    invokers: {
        handleRequest: {
            func: "{processReporter}.get",
            args: [
                "{request}"
            ]
        }
    }
});

fluid.defaults("gpii.processReporter.solution.get", {
    gradeNames: ["kettle.request.http"],
    invokers: {
        handleRequest: {
            func: "{processReporter}.getProcess",
            args: ["{request}", "{processReporter}", "{solutionsRegistryDataSource}"]
        }
    }
});

fluid.defaults("gpii.processReporter.nameResolver", {
    gradeNames: ["fluid.component"],
    invokers: {
        resolveName: {
            funcName: "fluid.identity"
        }
    }
});

gpii.processReporter.fireResponse = function (request, runningSolutions, platformReporter) {
    request.events.onSuccess.fire({
        solutions: runningSolutions,
        OS: platformReporter.reportPlatform()
    });
};

fluid.defaults("gpii.processReporter.live", {
    gradeNames: ["gpii.processReporter.base"],
    invokers: {
        get: {
            funcName: "gpii.processReporter.live.get",
            args: ["{arguments}.0", "{processReporter}", "{flowManager}.solutionsRegistryDataSource"]
        },
        getProcess: {
            funcName: "gpii.processReporter.live.getProcess",
            args: ["{arguments}.0", "{processReporter}", "{flowManager}.solutionsRegistryDataSource"]
        },
        handleIsRunning: {
            funcName: "gpii.processReporter.live.handleIsRunning",
            args: ["{arguments}.0", "{arguments}.1", "{processReporter}"]
                   // entry, entry id, processReporter
        }
    }
});

gpii.processReporter.live.handleIsRunning = function (entry, entryId, processReporter) {
    var runningSolution = null;
    if (!!entry.isRunning) {
        runningSolution = { id: entryId, isRunning: true };
        fluid.each (entry.isRunning, function (aMember) {
            var resolvedName = processReporter.nameResolver.resolveName(aMember.type, "processReporter");
            var partial = fluid.invokeGradedFunction(resolvedName, aMember);
            runningSolution.isRunning = runningSolution.isRunning && partial;
        });
    }
    return runningSolution;
};

gpii.processReporter.live.get = function (request, processReporter, solutionsRegistryDataSource) {
    var runningSolutions = [];
    solutionsRegistryDataSource.get({os: processReporter.platformReporter.reportPlatform().id}, function onSuccess(entries) {
        fluid.each(entries, function (entry, entryId) {
            var foundEntry = gpii.processReporter.live.handleIsRunning(entry, entryId, processReporter);
            if  (foundEntry !== null) {
                runningSolutions.push(foundEntry);
            }
        });
        processReporter.fireResponse(request, runningSolutions);
    });
};

gpii.processReporter.live.getProcess = function (request, processReporter, solutionsRegistryDataSource) {
    var solutionID = request.req.params.solutionID;
    solutionsRegistryDataSource.get({os: processReporter.platformReporter.reportPlatform().id}, function onSuccess(entries) {
        var result = fluid.find(entries, function (anEntry, entryID) {
            if (entryID === solutionID) {
                return gpii.processReporter.live.handleIsRunning(anEntry, entryID, processReporter);
            }
        }, null);
        if (result === null) {
            result = { id: solutionID, running: false };
        }
        processReporter.fireResponse(request, result);
    });
};

fluid.defaults("gpii.processReporter.dev", {
    gradeNames: ["kettle.urlExpander.distributeDevVariables"]
});
